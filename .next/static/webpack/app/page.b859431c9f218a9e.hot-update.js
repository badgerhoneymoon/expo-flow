"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/services/ocr-service.ts":
/*!*************************************!*\
  !*** ./lib/services/ocr-service.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OCRService: function() { return /* binding */ OCRService; }\n/* harmony export */ });\n/* harmony import */ var tesseract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tesseract.js */ \"(app-pages-browser)/./node_modules/tesseract.js/src/index.js\");\n/* harmony import */ var tesseract_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tesseract_js__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ OCRService auto */ \nclass OCRService {\n    /**\n   * Preprocesses an image to improve OCR accuracy by:\n   * 1. Converting the image to grayscale\n   * 2. Applying binary thresholding (black and white)\n   * 3. Increasing contrast\n   * \n   * @param file - The image file to process\n   * @returns Promise containing the processed image as a base64 data URL\n   */ static async preprocessImage(file) {\n        return new Promise((resolve)=>{\n            const reader = new FileReader();\n            reader.onload = (e)=>{\n                var _e_target;\n                const img = new Image();\n                img.onload = ()=>{\n                    // Create canvas for image manipulation\n                    const canvas = document.createElement(\"canvas\");\n                    const ctx = canvas.getContext(\"2d\");\n                    // Set canvas dimensions to match image\n                    canvas.width = img.width;\n                    canvas.height = img.height;\n                    if (ctx) {\n                        // Draw original image to canvas\n                        ctx.drawImage(img, 0, 0);\n                        // Get pixel data for processing\n                        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                        const data = imageData.data;\n                        // Apply binary thresholding\n                        // Convert each pixel to either pure black or pure white\n                        // This helps Tesseract better distinguish text from background\n                        for(let i = 0; i < data.length; i += 4){\n                            const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n                            // Threshold at 128 (mid-gray)\n                            data[i] = data[i + 1] = data[i + 2] = avg > 128 ? 255 : 0;\n                        }\n                        // Update canvas with processed image\n                        ctx.putImageData(imageData, 0, 0);\n                    }\n                    resolve(canvas.toDataURL());\n                };\n                img.src = (_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.result;\n            };\n            reader.readAsDataURL(file);\n        });\n    }\n    /**\n   * Performs OCR on an image file using Tesseract.js\n   * Includes preprocessing for better accuracy\n   * \n   * @param file - The image file to process\n   * @returns Promise containing the OCR result\n   */ static async performOCR(file) {\n        try {\n            console.log(\"Starting image processing:\", file.name);\n            // Apply image preprocessing to improve OCR accuracy\n            const processedImageUrl = await this.preprocessImage(file);\n            console.log(\"Image preprocessed\");\n            // Initialize Tesseract worker with English language\n            const worker = await (0,tesseract_js__WEBPACK_IMPORTED_MODULE_0__.createWorker)(\"eng\");\n            console.log(\"Worker created\");\n            // Configure Tesseract to treat the image as a single block of text\n            // This is optimal for business cards which typically have distinct text blocks\n            await worker.setParameters({\n                tessedit_pageseg_mode: tesseract_js__WEBPACK_IMPORTED_MODULE_0__.PSM.SINGLE_BLOCK\n            });\n            console.log(\"Starting OCR...\");\n            const result = await worker.recognize(processedImageUrl);\n            console.log(\"OCR completed\");\n            // Clean up worker resources\n            await worker.terminate();\n            // Validate that text was actually extracted\n            if (!result.data.text) {\n                throw new Error(\"No text extracted from image\");\n            }\n            return {\n                success: true,\n                text: result.data.text\n            };\n        } catch (error) {\n            console.error(\"OCR Error:\", error);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/services/ocr-service.ts\n"));

/***/ })

});